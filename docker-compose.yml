version: '3.8'

services:
  # Service 1: The Model API (Our FastAPI App)
  # This is the service we will scale.
  model-api:
    build: .  # Build from the Dockerfile in the current directory
    image: model-api-service  # Name the resulting image
    expose:
      - "8000"  # Expose port 8000 ONLY to other services on the network
    networks:
      - app-network  # Connect to our custom network
    # Note: If you plan to scale, you should not set container_name here, 
    # but rely on Docker Compose's naming.

  # Service 2: The Load Balancer (NGINX)
  # This is the *only* entry point for users.
  nginx:
    image: nginx:1.25-alpine  # Use the lightweight NGINX image
    ports:
      - "80:80"  # Map host port 80 to container port 80
    volumes:
      # Mount our NGINX config into the container
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - app-network
    depends_on:
      - model-api  # Wait for the API to be ready before starting

  # Service 3: The Metrics Database (Prometheus)
  prometheus:
    image: prom/prometheus:v2.53.0
    ports:
      - "9090:9090"  # Expose the Prometheus dashboard
    environment:
      # CRITICAL: Inject the environment variable from the host/secrets manager
      - GRAFANA_PROMETHEUS_PASSWORD
    volumes:
      # Mount our Prometheus config (assumes prometheus/prometheus.yml uses password_file)
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      # Volume for the secrets file created at runtime
      - ./secrets:/etc/prometheus/secrets
      # Make Prometheus data persistent
      - prometheus_data:/prometheus
    networks:
      - app-network
    depends_on:
      - model-api
    
    entrypoint: /bin/sh
    command:
      - -c
      - |
        echo "$$GRAFANA_PROMETHEUS_PASSWORD" > /etc/prometheus/secrets/grafana-password &&
        chmod 600 /etc/prometheus/secrets/grafana-password &&
        exec /bin/prometheus --config.file=/etc/prometheus/prometheus.yml --web.listen-address=:9090

  # Service 4: Elasticsearch (Data Store for Logs)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - app-network

  # Service 5: Logstash (Log Processor)
  logstash:
    image: docker.elastic.co/logstash/logstash:8.12.0
    ports:
      - "5044:5044"
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    networks:
      - app-network
    depends_on:
      - elasticsearch

  # Service 6: Kibana (Visualization Dashboard)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - app-network
    depends_on:
      - elasticsearch

# Define the persistent volumes
volumes:
  prometheus_data:
  elasticsearch_data:

# Define the custom network
networks:
  app-network:
    driver: bridge
